Search Algorithms: Ternary Search and Interpolation Search
Overview
This repository contains implementations and explanations for two advanced search algorithms: Ternary Search and Interpolation Search. Both are more specialized alternatives to Binary Search, designed to work efficiently on sorted data. These algorithms aim to improve search performance in specific scenarios by adjusting the way the search space is divided or by estimating the position of the target element.

Ternary Search
What is Ternary Search?
Ternary Search is a divide-and-conquer algorithm that searches for an element in a sorted array by dividing the search space into three parts instead of two. It compares the target element with two midpoints (mid1 and mid2) and progressively narrows down the search space.

How it Works:
Initial Setup: The array is divided into three sections by calculating two midpoints:

mid1 = low + (high - low) / 3

mid2 = high - (high - low) / 3

Comparison: The target element is compared to the values at mid1 and mid2:

If the target is equal to either mid1 or mid2, the index is returned.

If the target is smaller than mid1, the search continues in the left section.

If the target is greater than mid2, the search continues in the right section.

If the target lies between mid1 and mid2, the search continues in the middle section.

Repeat: The process is repeated until the target element is found or the search space is narrowed down to an empty range.

Time Complexity:
Best Case: O(log₃ n) — The time complexity is logarithmic, and since we divide the search space into three parts, it’s slightly faster than Binary Search.

Worst Case: O(log₃ n) — The complexity remains the same even in the worst case.

Average Case: O(log₃ n) — Average-case time complexity is similar.

Space Complexity:
O(1) — Ternary Search uses constant space because it only requires a few variables to track the search range and midpoints.

Use Case:
Ternary Search is best suited for sorted arrays and works well when splitting the search space into three parts could potentially speed up the search. It doesn’t outperform Binary Search significantly, but it provides an interesting alternative to explore.

Interpolation Search
What is Interpolation Search?
Interpolation Search is an advanced search algorithm that is an improvement over Binary Search. Instead of dividing the array into two equal halves, it estimates the position of the target element based on its value and the values at the boundaries of the search range.

How it Works:
Initial Setup: The search range is defined by the low and high indices. The algorithm calculates the estimated position (pos) of the target element based on the following formula:

Comparison: The target is compared to the element at position pos:

If the element at pos matches the target, the index is returned.

If the target is smaller than the element at pos, the search continues in the left section.

If the target is greater, the search continues in the right section.

Repeat: The process continues until the target is found or the search range becomes invalid.

Time Complexity:
Best Case: O(log log n) — When the array is uniformly distributed, Interpolation Search makes accurate guesses about the target’s position.

Worst Case: O(n) — If the data is not uniformly distributed, the interpolation formula may fail and lead to a linear search.

Average Case: O(log log n) — For uniformly distributed data, it operates similarly to Binary Search but with a better position estimation.

Space Complexity:
O(1) — Interpolation Search uses constant space since it only requires a few extra variables to store the search range and the calculated position.

Use Case:
Interpolation Search is ideal for sorted arrays where the elements are uniformly distributed. It performs well when the distribution of values is uniform, as the interpolation formula will give a good estimate of the target's position.

Comparison of Ternary Search and Interpolation Search
Criteria	Ternary Search	Interpolation Search
Search Method	Divides the search space into three parts.	Estimates the position based on values at the boundaries.
Time Complexity	O(log₃ n), which simplifies to O(log n).	Best case: O(log log n) for uniform data. Worst case: O(n) for non-uniform data.
Space Complexity	O(1)	O(1)
Best Use Case	Sorted arrays, where dividing into three parts may help.	Sorted arrays with uniformly distributed elements.
Performance	Works well, but not significantly faster than Binary Search.	Efficient for uniformly distributed data, but may fail on skewed distributions.
When to Use Which Search?
Ternary Search: Use when you want to explore dividing the search space into three parts instead of two. It doesn’t outperform Binary Search by a large margin but can be useful in specific scenarios or for learning purposes.

Interpolation Search: Best used when the array is sorted and the data is uniformly distributed. It’s faster than Binary Search in the best case when the data distribution is uniform, but may degrade to linear search if the data distribution is skewed.




